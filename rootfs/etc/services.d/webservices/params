#!/bin/sh

set -u # Treat unset variables as an error.

tolower() {
    echo "$1" | tr 'A-Z' 'a-z'
}

if is-bool-val-true "${CONTAINER_DEBUG:-0}"; then
    echo "--log-level"
    echo "debug"
fi

if is-bool-val-true "${WEB_FILE_MANAGER:-0}"; then
    echo "--enable-file-manager"

    ALLOWED_PATHS="$(mktemp)"
    DENIED_PATHS="$(mktemp)"

    # Add allowed paths.
    echo "${WEB_FILE_MANAGER_ALLOWED_PATHS:-AUTO}" | tr ',' '\n' | while read -r ALLOWED_PATH
    do
        [ -n "$ALLOWED_PATH" ] || continue

        if [ "$(tolower "$ALLOWED_PATH")" = "all" ]; then
            # Clear the file of allowed path and stop.
            echo > "$ALLOWED_PATHS"
            break
        elif [ "$(tolower "$ALLOWED_PATH")" = "auto" ]; then
            # Some well-known paths that are allowed.
            for DIR in /storage /output /config /tmp;
            do
                echo "$DIR" >> "$ALLOWED_PATHS"
            done

            # Add volumes mapped to the container.
            cat /proc/mounts | awk '{print $3 " " $2}' | while read -r MOUNT
            do
                filesystem="$(echo "$MOUNT" | cut -d' ' -f1)"
                mountpoint="$(echo "$MOUNT" | cut -d' ' -f2-)"

                # Ignore mounts associated to system related file system types.
                case "$filesystem" in
                    cgroup*) continue ;;
                    devpts) continue ;;
                    mqueue) continue ;;
                    proc) continue ;;
                    sysfs) continue ;;
                    tmpfs) continue ;;
                    *) ;;
                esac

                # Ignore mounts associated to system related paths.
                case "$mountpoint" in
                    /) continue ;;
                    /dev|/dev/*) continue ;;
                    /etc|/etc/*) continue ;;
                    /proc|/proc/*) continue ;;
                    /sys|/sys/*) continue ;;
                    *) ;;
                esac

                echo "$mountpoint" >> "$ALLOWED_PATHS"
            done
        else
            echo "$ALLOWED_PATH" >> "$ALLOWED_PATHS"
        fi
    done

    # Add denied paths.
    echo "${WEB_FILE_MANAGER_DENIED_PATHS:-}" | tr ',' '\n' | while read -r DENIED_PATH
    do
        [ -n "$DENIED_PATH" ] || continue
        echo "$DENIED_PATH" >> "$DENIED_PATHS"
    done

    # Print all arguments.
    cat "$ALLOWED_PATHS" | sort -u | while read -r ALLOWED_PATH;
    do
        [ -n "$ALLOWED_PATH" ] || continue
        echo "--allowed-path"
        echo "$ALLOWED_PATH"
    done
    cat "$DENIED_PATHS" | sort -u | while read -r DENIED_PATH;
    do
        [ -n "$DENIED_PATH" ] || continue
        echo "--denied-path"
        echo "$DENIED_PATH"
    done

    rm "$ALLOWED_PATHS"
    rm "$DENIED_PATHS"

#    if is-bool-val-true "${WEB_FILE_MANAGER_RESTRICTION:-1}"; then
#        ALLOWED_PATHS="$(mktemp)"
#
#        # Some well-known paths that are allowed.
#        for DIR in /storage /output /config /tmp;
#        do
#            echo "$DIR" >> "$ALLOWED_PATHS"
#        done
#
#        # Add volumes mapped to the container.
#        cat /proc/mounts | awk '{print $3 " " $2}' | while read -r MOUNT
#        do
#            filesystem="$(echo "$MOUNT" | cut -d' ' -f1)"
#            mountpoint="$(echo "$MOUNT" | cut -d' ' -f2-)"
#
#            # Ignore mounts associated to system related file system types.
#            case "$filesystem" in
#                cgroup*) continue ;;
#                devpts) continue ;;
#                mqueue) continue ;;
#                proc) continue ;;
#                sysfs) continue ;;
#                tmpfs) continue ;;
#                *) ;;
#            esac
#
#            # Ignore mounts associated to system related paths.
#            case "$mountpoint" in
#                /) continue ;;
#                /dev|/dev/*) continue ;;
#                /etc|/etc/*) continue ;;
#                /proc|/proc/*) continue ;;
#                /sys|/sys/*) continue ;;
#                *) ;;
#            esac
#
#            echo "$mountpoint" >> "$ALLOWED_PATHS"
#        done
#
#        cat "$ALLOWED_PATHS" | sort -u | while read -r ALLOWED_PATH;
#        do
#            [ -n "$ALLOWED_PATH" ] || continue
#            echo "--allowed-path"
#            echo "$ALLOWED_PATH"
#        done
#        rm "$ALLOWED_PATHS"
#    fi
fi
